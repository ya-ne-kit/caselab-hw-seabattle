import java.util.Scanner;

public class Seabattle {
    private final int RANGE = 10;
    private final int MISSED_HIT = 1000;
    private final int  FINAL_SCORE = 20;
    private final String COORD_LINE = "   |0|1|2|3 |4|5|6| 7|8|9";

    private String player1;
    private String player2;

    private final int[][] battleFieldPlayer1 = new int[RANGE][RANGE];
    private final int[][] battleFieldPlayer2 = new int[RANGE][RANGE];

    private final Scanner s = new Scanner(System.in);

    private void setPlayer1() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: ");
        this.player1 = s.nextLine();
    }

    private void setPlayer2() {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞: ");
        player2 = s.nextLine();
    }

    public void start() {
        System.out.println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ú–û–†–°–ö–û–ô –ë–û–ô! \n–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!");
        setPlayer1();
        setPlayer2();
        System.out.println("""
                –¢–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –ø–æ–ª—è –∫–æ—Ä–∞–±–ª—è–º–∏.\s
                –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å—Ö–æ–¥–∏—Ç—å –∏–∑ –ø—Ä–∞–≤–∏–ª:\s
                - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –æ—Ç 0 –¥–æ 9,\s
                - –æ—Ç—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞.\s
                –ß–∏—Å–ª–æ –∫–æ—Ä–∞–±–ª–µ–π:\s
                4-–ø–∞–ª—É–±–Ω—ã–π - 1,\s
                3-–ø–∞–ª—É–±–Ω—ã–µ - 2,\s
                2-–ø–∞–ª—É–±–Ω—ã–µ - 3,\s
                1-–ø–∞–ª—É–±–Ω—ã–µ - 4.\s
                –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è, –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è.""");
        System.out.println("\n–ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏–≥—Ä–æ–∫ 1.");
        fillFieldPlayer(battleFieldPlayer1);
        System.out.println("\n–ü–æ–ª–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏–≥—Ä–æ–∫ 2.");
        fillFieldPlayer(battleFieldPlayer2);
        System.out.println("–í–Ω–∏–º–∞–Ω–∏–µ, –∏–≥—Ä–æ–∫–∏! –ë–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! \n" +
                "–°—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –∫—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ —É–Ω–∏—á—Ç–æ–∂–∏—Ç –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!");

        while (true) shooting();
    }

    // –º–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è –∏–≥—Ä–æ–∫–∞
    private void fillFieldPlayer(int[][] battleField) {
        for (int h = 4; h > 0; h--) {
            for (int i = 0; i < 5 - h; i++) {
                Ship tmpShip = null;
                while (tmpShip == null) {
                    tmpShip = getShip(h);
                }
                if (h != 4) {
                    if (!isPlaceAvailable(tmpShip, battleField)) {
                        System.out.println("–ö–æ—Ä–∞–±–ª—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–µ–ª—å–∑—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ.");
                        i--;
                        continue;
                    }
                }
                fillShip(tmpShip, battleField);
                displayOwnerBattleField(battleField);
            }
        }
    }

    // –ø–æ–ª—É—á–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä–∞–±–ª—è
    private Ship getShip(int n) {
        System.out.printf("–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏, –∑–∞–Ω–∏–º–∞–µ–º–æ–π %d-–ø–∞–ª—É–±–Ω—ã–º –∫–æ—Ä–∞–±–ª–µ–º: ", n);
        int y = s.nextInt();
        int x = s.nextInt();
        int kurs = 1;
        if (n != 1) {
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è: —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤–ø—Ä–∞–≤–æ (1) –∏–ª–∏ –∫–Ω–∏–∑—É (2) –æ—Ç –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏: ");
            kurs = s.nextInt();
        }
        if (y < 0 || y > 9 || x < 0 || x > 9 || kurs > 2 || kurs < 1) {
            System.out.println("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è");
            return null;
        }
        return new Ship(x, y, n, kurs);
    }

    // —Å—Ç–∞–≤–∏–º –∫–æ—Ä–∞–±–ª—å –Ω–∞ –ø–æ–ª–µ
    private void fillShip(Ship ship, int[][] battleField) {
        if (ship.getKurs() == 2) {
            for (int i = ship.getX(); i < ship.getX() + ship.getN(); i++) {
                battleField[i][ship.getY()] = ship.getN();
            }
        } else {
            for (int i = ship.getY(); i < ship.getY() + ship.getN(); i++) {
                battleField[ship.getX()][i] = ship.getN();
            }
        }
    }

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º - –ø—É—Å—Ç–æ–µ –ª–∏ –º–µ—Å—Ç–æ
    private boolean isPlaceAvailable(Ship ship, int[][] battleField) {
        int x1 = ship.getX() - 1 < 0 ? 0 : ship.getX() - 1;
        int y1 = ship.getY() - 1 < 0 ? 0 : ship.getY() - 1;
        int x2 = 0;
        int y2 = 0;
        if (ship.getKurs() == 2) {
            x2 = ship.getX() + ship.getN() + 1 > battleField.length ? battleField.length - 1 : ship.getX() + ship.getN() + 1;
            y2 = ship.getY() + 1 > battleField.length ? battleField.length - 1 : ship.getY() + 1;
        } else if (ship.getKurs() == 1) {
            x2 = ship.getX() + 1 > battleField.length ? battleField.length - 1 : ship.getX() + 1;
            y2 = ship.getY() + ship.getN() + 1 > battleField.length ? battleField.length - 1 : ship.getY() + ship.getN() + 1;
        }
        for (int i = x1; i < x2; i++) {
            for (int j = y1; j < y2; j++) {
                if (battleField[i][j] != 0) return false;
            }
        }
        return true;
    }

    // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ (—Å–∫—Ä—ã—Ç—ã –∫–æ—Ä–∞–±–ª–∏)
    private void displayOpponentBattleField(int[][] battleField) {
        System.out.println("--------------------------");
        System.out.println(COORD_LINE);
        for (int i = 0; i < battleField.length; i++) {
            System.out.printf(" %d ", i);
            for (int j = 0; j < battleField.length; j++) {
                System.out.print(battleField[i][j] == MISSED_HIT ? "üî≤" :
                        battleField[i][j] < 0 ? "‚ùå" : "‚¨ú");
            }
            System.out.println();
        }
        System.out.println(COORD_LINE);
        System.out.println("--------------------------");
    }

    // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–µ –ø–æ–ª–µ (–≤–∏–¥–Ω–æ –≤—Å—ë)
    private void displayOwnerBattleField(int[][] battleField) {
        System.out.println("--------------------------");
        System.out.println(COORD_LINE);
        for (int i = 0; i < battleField.length; i++) {
            System.out.printf(" %d ", i);
            for (int j = 0; j < battleField.length; j++) {
                System.out.print(battleField[i][j] == 0 ? "‚¨ú" : battleField[i][j] == MISSED_HIT ? "üî≤" :
                        battleField[i][j] > 0 ? "‚¨õ" : "‚ùå");
            }
            System.out.println();
        }
        System.out.println(COORD_LINE);
        System.out.println("--------------------------");
    }

    // –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ —à—É—Ç–∏–Ω–≥–∞ - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–∞ —É–¥–∞—Ä–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    private void shooting() {
        int result = 1;
        while (result == 1) {
            result = shoot(player1, battleFieldPlayer2);
            displayAndCheckAfterShooting(player1, battleFieldPlayer2);
        }
        result = 1;
        while (result == 1) {
            result = shoot(player2, battleFieldPlayer1);
            displayAndCheckAfterShooting(player2, battleFieldPlayer1);
        }
    }

    // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ—Å–ª–µ —É–¥–∞—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç–∞
    private void displayAndCheckAfterShooting(String player, int[][] battleField) {
        displayOpponentBattleField(battleField);
        if (getScore(battleField) == FINAL_SCORE) {
            System.out.printf("\n---------------------\n–ò–≥—Ä–æ–∫ %s –ü–û–ë–ï–î–ò–õ!\n---------------------\n", player);
            System.exit(0);
        }
    }

    // —Ç–µ–ª–æ –¥–µ–π—Å—Ç–≤–∏—è - —É–¥–∞—Ä–∞ –ø–æ —Ü–µ–ª–∏
    private int shoot(String player, int[][] battleField) {
        System.out.printf("%s, –≤–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∫—É–¥–∞ –±–∏—Ç—å: ", player);
        int y = s.nextInt();
        int x = s.nextInt();
        while (y < 0 || y > 9 || x < 0 || x > 9) {
            System.out.println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–¥–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!");
            y = s.nextInt();
            x = s.nextInt();
        }
        if (battleField[x][y] > 0) {
            System.out.println("–ü–û–†–ê–ñ–ï–ù–ò–ï!");
            battleField[x][y] = -battleField[x][y];
            return 1;
        } else if (battleField[x][y] < 0) {
            System.out.println("–ß–¢–û –ú–ï–†–¢–í–û, –ù–ï –ú–û–ñ–ï–¢ –£–ú–ï–†–ï–¢–¨ –î–í–ê–ñ–î–´!");
            return 0;
        } else {
            System.out.println("–ú–ò–ú–û!");
            battleField[x][y] = MISSED_HIT;
            return -1;
        }
    }

    // –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—á–µ—Ç–∞
    private int getScore(int[][] battleField) {
        int count = 0;
        for (int[] ints : battleField) {
            for (int j = 0; j < battleField.length; j++) {
                if (ints[j] < 0) count++;
            }
        }
        return count;
    }
}